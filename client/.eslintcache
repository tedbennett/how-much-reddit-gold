[{"/Users/ted/Developer/webdev/node/reddit-premium/client/src/App.jsx":"1","/Users/ted/Developer/webdev/node/reddit-premium/client/src/index.js":"2","/Users/ted/Developer/webdev/node/reddit-premium/client/src/components/url-form/UrlForm.jsx":"3","/Users/ted/Developer/webdev/node/reddit-premium/client/src/components/awards-table/AwardsTable.jsx":"4","/Users/ted/Developer/webdev/node/reddit-premium/client/src/Context.jsx":"5"},{"size":760,"mtime":1607586107953,"results":"6","hashOfConfig":"7"},{"size":317,"mtime":1607583197433,"results":"8","hashOfConfig":"7"},{"size":1313,"mtime":1607586280546,"results":"9","hashOfConfig":"7"},{"size":870,"mtime":1607586421560,"results":"10","hashOfConfig":"7"},{"size":97,"mtime":1607585806593,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iy7o0y",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ted/Developer/webdev/node/reddit-premium/client/src/App.jsx",[],"/Users/ted/Developer/webdev/node/reddit-premium/client/src/index.js",[],"/Users/ted/Developer/webdev/node/reddit-premium/client/src/components/url-form/UrlForm.jsx",["23"],"import React, { useState, useContext } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport AppContext from '../../Context';\n\nconst UrlForm = () => {\n  const [link, setLink] = useState('');\n  const { dispatch } = useContext(AppContext);\n\n  const updateAwards = (awards) => {\n    dispatch({ type: 'UPDATE', data: awards });\n  };\n\n  const handleSubmit = async () => {\n    const body = { url: link };\n    const response = await fetch('/api/awards', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    });\n    const newAwards = await response.json();\n    console.log(newAwards);\n    updateAwards(newAwards);\n  };\n\n  const handleClear = () => {\n    setLink('');\n    updateAwards([]);\n  };\n\n  return (\n    <Form>\n      <Form.Group controlId=\"formUrl\">\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Paste reddit link\"\n          className=\"text-center\"\n          value={link}\n          onChange={(e) => setLink(e.target.value)}\n        />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"button\" onClick={handleSubmit}>\n        Submit\n      </Button>\n      <Button variant=\"primary\" type=\"button\" onClick={handleClear}>\n        Clear\n      </Button>\n    </Form>\n  );\n};\n\nexport default UrlForm;\n","/Users/ted/Developer/webdev/node/reddit-premium/client/src/components/awards-table/AwardsTable.jsx",["24"],"/Users/ted/Developer/webdev/node/reddit-premium/client/src/Context.jsx",[],{"ruleId":"25","severity":1,"message":"26","line":23,"column":5,"nodeType":"27","messageId":"28","endLine":23,"endColumn":16},{"ruleId":"25","severity":1,"message":"26","line":7,"column":3,"nodeType":"27","messageId":"28","endLine":7,"endColumn":14},"no-console","Unexpected console statement.","MemberExpression","unexpected"]